@using BlazorEcommerce.Shared
@inject IProductoService ProductoService
@implements IDisposable

@if (ProductoService.Productos == null || ProductoService.Productos.Count == 0)
{
    <span>Cargando Productos...</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var producto in ProductoService.Productos)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/producto/@producto.Id">
                        <img class="media-img" src="@producto.ImaxeUrl" alt="@producto.Titulo" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/producto/@producto.Id">
                        <h4 class="mb-0">@producto.Titulo</h4>
                    </a>
                    <p>@producto.Descripcion</p>
                    <h5 class="price">
                        @* @producto.Precio€ *@
                        @GetPrecioText(producto)
                    </h5>
                </div>
            </li>
        }
    </ul>
}


@code {
    protected override void OnInitialized()
    {
        ProductoService.ProductosCambiaron += StateHasChanged; //isto indica ao razor component o estado cambiou
    }

    public void Dispose()
    {
        ProductoService.ProductosCambiaron -= StateHasChanged;
    }

    private string GetPrecioText(Producto producto)
    {
        var variantes = producto.Variantes;
        if (variantes.Count == 0)
        {
            return string.Empty;
        }
        else if (variantes.Count == 1)
        {
            return $"{variantes[0].Precio}€";
        }
        decimal precioMinimo = variantes.Min(v => v.Precio);
        return $"Comenzando en {precioMinimo}€";
        //Unicamente os productos con mais dunha variante (ex. libro publicado en papel, ou e-book, etc) mostran o texto
        //"Comenzando en..."
    }
}