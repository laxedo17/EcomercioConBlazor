@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ICarroService CarroService

<div class="dropdown">
    <button @onclick="ToggleMenuUsuario" @onfocusout="HideMenuUsuario"
        class="btn btn-secondary dropdown-toggle usuario-button">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @UsuarioMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <a href="profile" class="dropdown-item">Perfil</a>
                <hr />
                <button class="dropdown-item" @onclick="Logout">Sair</button>
            </Authorized>
            <NotAuthorized>
                <a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)"
                    class="dropdown-item">Entrar</a>
                <a href="register" class="dropdown-item">Rexistro</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool mostrarUsuarioMenu = false;
    private string UsuarioMenuCssClass => mostrarUsuarioMenu ? "show-menu" : null;

    private void ToggleMenuUsuario()
    {
        mostrarUsuarioMenu = !mostrarUsuarioMenu;
    }

    private async Task HideMenuUsuario()
    {
        await Task.Delay(200); //necesario porque senon o evento focus out que editamos arriba cancela a navegacion dos enlaces
        mostrarUsuarioMenu = false;
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await CarroService.GetCarroItemsCount();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }
}
